
function __kitrun_complete()
{
    COMPREPLY=( $(compgen -W "$1" -- ${cur}) )
}

__kitrun_cmds="bakeami logs quickdeploy remotecmd runami runserver runsystest runsystest_dbkit shell sqlcmd ssh staticdata tenant tier"

function __kitrun_deployables()
{
    __kitrun_complete "$( python -c $'from drift import management\nfor d in management.get_tier_config()["deployables"]: print d["name"]' )"
}

function __kitrun_ssh()
{
     __kitrun_deployables
}

function __kitrun_tenant()
{
    __kitrun_complete "create drop recreate"
}

function __kitrun_tier()
{
     __kitrun_complete "create info init list publish-config unpublish-config use"
}

function __find_kitrun_cmd()
{
    for word in ${COMP_WORDS[@]:1}; do
        if [ ${word:0:1} != "-" ]; then
            for kitrun_cmd in ${__kitrun_cmds}; do
                if [ "$word" == "$kitrun_cmd" ]; then
                    echo $kitrun_cmd
                    return
                fi
            done
        fi
    done
}

__kitrun()
{
    local cur prev opts

    COMPREPLY=()

    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    local cmd=$(__find_kitrun_cmd)

    case "${cmd}" in
        bakeami)
            ;;
        logs)
            ;;
        quickdeploy)
            ;;
        remotecmd)
            ;;
        runami)
            ;;
        runserver)
            ;;
        runsystest)
            ;;
        runsystest_dbkit)
            ;;
        shell)
            ;;
        sqlcmd)
            ;;
        ssh)
            __kitrun_ssh
            ;;
        staticdata)
            ;;
        tenant)
            __kitrun_tenant
            ;;
        tier)
            __kitrun_tier
            ;;
        *)
            __kitrun_complete "$__kitrun_cmds"
            ;;
    esac
}

complete -F __kitrun kitrun.py
